/*
  NOKIA 1100 Screen
  This is the driver of the LCD based on code by spiralbrain
  modified by:
  name:kuldeep singh dhaka
  email:kuldeepdhaka9@gmail.com
  date:17 May 2012
  Source: http://sunbizhosting.com/~spiral/ 
  
  Driver For  Arduino Dueminalove Atmega328
  Interfacing with the Nokia 1100 LCD, PCF8814 ( 96X65 )
  
  licence: gpl-v3 http://www.gnu.org/licenses/gpl.html [i just want to make its source available to every one]
*/
/*
  PIN configuration:
  
  to know the pins, view the screen from front, pin 1 is on right side
  read : http://www.circuitvalley.com/2011/09/nokia-1100-lcd-interfacing-with.html
  example
    |-----------------|
    |  screen         |
    |    front        |
    |_________________|
     | | | | | | | | |
     1 2 3 4 5 6 7 8 9
     
     PIN 1: XRES
     PIN 2: XCS
     PIN 3: GND
     PIN 4: SDA
     PIN 5: SCLK
     PIN 6: VDDI
     PIN 7: VDD
     PIN 8: LED+
     PIN 9: Unused

	 WE shorted PIN 6,7,8
	the lcd needs 3v logic therefore we are using potentiometers
*/
//==============================================================================
/* Шрифт 6 на 8 пикселов.
// Повторяет шрифт Terminal Microsoft Windows.
  8,                    // Высота символа в пикселах.
  6,                    // Ширина символа в пикселах.
  255,                  // Число символов в шрифте.
// Изображение символа хранится в формате:
// Каждый байт описывает столбец изображения символа.
// Столбцы описываются слева-направо.
// Младший бит байта описывается верхнюю строку стобца,
// старший бит - нижнюю строку.*/
//==============================================================================
 const unsigned char Font8x6[] =
 {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00,// 0x00 - пустое знакоместо.
   0x00, 0x3e, 0x45, 0x51, 0x45, 0x3e,// 0x01 - лицо с улыбкой.
   0x00, 0x3e, 0x6b, 0x6f, 0x6b, 0x3e,// 0x02 - лицо с улыбкой закрашенное.
   0xff, 0xc3, 0xdb, 0xdb, 0xc3, 0xff,// 0x03 - червы (сердце).
   0x00, 0x18, 0x3c, 0x7e, 0x3c, 0x18,// 0x04 - бубны.
   0x00, 0x30, 0x36, 0x7f, 0x36, 0x30,// 0x05 - крести.
   0x00, 0x18, 0x5c, 0x7e, 0x5c, 0x18,// 0x06 - вини.
   0x00, 0x00, 0x18, 0x18, 0x00, 0x00,// 0x07 - закрашенный круг по центру.
   0xff, 0xff, 0xe7, 0xe7, 0xff, 0xff,// 0x08 - закрашенный круг по центру в инверсии.
   0x00, 0x3c, 0x24, 0x24, 0x3c, 0x00,// 0x09 - незакрашенный круг по центру.
   0xff, 0xc3, 0xdb, 0xdb, 0xc3, 0xff,// 0x0a - незакрашенный круг по центру в инверсии (кольцо).
   0x00, 0x30, 0x48, 0x4a, 0x36, 0x0e,// 0x0b - мужской символ (круг со стрелкой вверх).
   0x00, 0x06, 0x29, 0x79, 0x29, 0x06,// 0x0c - женский символ (круг с крестом внизу).
   0x00, 0x60, 0x70, 0x3f, 0x02, 0x04,// 0x0d - нота I.
   0x00, 0x60, 0x7e, 0x0a, 0x35, 0x3f,// 0x0e - нота II.
   0x00, 0x2a, 0x1c, 0x36, 0x1c, 0x2a,// 0x0f - солнце (круг с расходящимися лучами).
   0x00, 0x00, 0x7f, 0x3e, 0x1c, 0x08,// 0x10 - толстая стрелка вправо.
   0x00, 0x08, 0x1c, 0x3e, 0x7f, 0x00,// 0x11 - толстая стрелка влево.
   0x00, 0x14, 0x36, 0x7f, 0x36, 0x14,// 0x12 - тонкая стрелка вверх-вниз.
   0x00, 0x00, 0x5f, 0x00, 0x5f, 0x00,// 0x13 - два восклицательных знака.
   0x00, 0x06, 0x09, 0x7f, 0x01, 0x7f,// 0x14 - символ "Пи".
   0x00, 0x22, 0x4d, 0x55, 0x59, 0x22,// 0x15 - символ параграфа.
   0x00, 0x60, 0x60, 0x60, 0x60, 0x00,// 0x16 - широкое подчеркивание.
   0x00, 0x14, 0xb6, 0xff, 0xb6, 0x14,// 0x17 - тонкая стрелка вверх-вниз с подчеркиванием.
   0x00, 0x04, 0x06, 0x7f, 0x06, 0x04,// 0x18 - тонкая стрелка вверх.
   0x00, 0x10, 0x30, 0x7f, 0x30, 0x10,// 0x19 - тонкая стрелка вниз.
   0x00, 0x08, 0x08, 0x3e, 0x1c, 0x08,// 0x1a - тонкая стрелка вправо.
   0x00, 0x08, 0x1c, 0x3e, 0x08, 0x08,// 0x1b - тонкая стрелка влево.
   0x00, 0x78, 0x40, 0x40, 0x40, 0x40,// 0x1c - символ отступа.
   0x00, 0x08, 0x3e, 0x08, 0x3e, 0x08,// 0x1d - тонкая стрелка влево-вправо.
   0x00, 0x30, 0x3c, 0x3f, 0x3c, 0x30,// 0x1e - толстая стрелка вверх.
   0x00, 0x03, 0x0f, 0x3f, 0x0f, 0x03,// 0x1f - толстая стрелка вниз.
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00,// 0x20 - пробел (пустое знакоместо).
   0x00, 0x00, 0x06, 0x5f, 0x06, 0x00,// 0x21 - восклицательный знак.
   0x00, 0x07, 0x03, 0x00, 0x07, 0x03,// 0x22 - двойная кавычка.
   0x00, 0x24, 0x7e, 0x24, 0x7e, 0x24,// 0x23 - решетка.
   0x00, 0x24, 0x2b, 0x6a, 0x12, 0x00,// 0x24 - доллар.
   0x00, 0x63, 0x13, 0x08, 0x64, 0x63,// 0x25 - процент.
   0x00, 0x36, 0x49, 0x56, 0x20, 0x50,// 0x26 - амперсанд.
   0x00, 0x00, 0x07, 0x03, 0x00, 0x00,// 0x27 - апостроф.
   0x00, 0x00, 0x3e, 0x41, 0x00, 0x00,// 0x28 - открывающая скобка.
   0x00, 0x00, 0x41, 0x3e, 0x00, 0x00,// 0x29 - закрывающая скобка.
   0x00, 0x08, 0x3e, 0x1c, 0x3e, 0x08,// 0x2a - звездочка (умножение).
   0x00, 0x08, 0x08, 0x3e, 0x08, 0x08,// 0x2b - плюс.
   0x00, 0x00, 0xe0, 0x60, 0x00, 0x00,// 0x2c - запятая.
   0x00, 0x08, 0x08, 0x08, 0x08, 0x08,// 0x2d - тире.
   0x00, 0x00, 0x60, 0x60, 0x00, 0x00,// 0x2e - точка.
   0x00, 0x20, 0x10, 0x08, 0x04, 0x02,// 0x2f - слеш слева-направо ('/').
   0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e,// 0x30 - '0'.
   0x00, 0x00, 0x42, 0x7f, 0x40, 0x00,// 0x31 - '1'.
   0x00, 0x62, 0x51, 0x49, 0x49, 0x46,// 0x32 - '2'.
   0x00, 0x22, 0x49, 0x49, 0x49, 0x36,// 0x33 - '3'.
   0x00, 0x18, 0x14, 0x12, 0x7f, 0x10,// 0x34 - '4'.
   0x00, 0x2f, 0x49, 0x49, 0x49, 0x31,// 0x35 - '5'.
   0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30,// 0x36 - '6'.
   0x00, 0x01, 0x71, 0x09, 0x05, 0x03,// 0x37 - '7'.
   0x00, 0x36, 0x49, 0x49, 0x49, 0x36,// 0x38 - '8'.
   0x00, 0x06, 0x49, 0x49, 0x29, 0x1e,// 0x39 - '9'.
   0x00, 0x00, 0x6c, 0x6c, 0x00, 0x00,// 0x3a - двоеточие.
   0x00, 0x00, 0xec, 0x6c, 0x00, 0x00,// 0x3b - точка с запятой.
   0x00, 0x08, 0x14, 0x22, 0x41, 0x00,// 0x3c - меньше.
   0x00, 0x24, 0x24, 0x24, 0x24, 0x24,// 0x3d - равно.
   0x00, 0x00, 0x41, 0x22, 0x14, 0x08,// 0x3e - больше.
   0x00, 0x02, 0x01, 0x59, 0x09, 0x06,// 0x3f - вопросительный знак.
   0x00, 0x3e, 0x41, 0x5d, 0x55, 0x1e,// 0x40 - "собака" ('@').
   0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e,// 0x41 - 'A'.
   0x00, 0x7f, 0x49, 0x49, 0x49, 0x36,// 0x42 - 'B'.
   0x00, 0x3e, 0x41, 0x41, 0x41, 0x22,// 0x43 - 'C'.
   0x00, 0x7f, 0x41, 0x41, 0x41, 0x3e,// 0x44 - 'D'.
   0x00, 0x7f, 0x49, 0x49, 0x49, 0x41,// 0x45 - 'E'.
   0x00, 0x7f, 0x09, 0x09, 0x09, 0x01,// 0x46 - 'F'.
   0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a,// 0x47 - 'G'.
   0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f,// 0x48 - 'H'.
   0x00, 0x00, 0x41, 0x7f, 0x41, 0x00,// 0x49 - 'I'.
   0x00, 0x30, 0x40, 0x40, 0x40, 0x3f,// 0x4a - 'J'.
   0x00, 0x7f, 0x08, 0x14, 0x22, 0x41,// 0x4b - 'K'.
   0x00, 0x7f, 0x40, 0x40, 0x40, 0x40,// 0x4c - 'L'.
   0x00, 0x7f, 0x02, 0x04, 0x02, 0x7f,// 0x4d - 'M'.
   0x00, 0x7f, 0x02, 0x04, 0x08, 0x7f,// 0x4e - 'N'.
   0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e,// 0x4f - 'O'.
   0x00, 0x7f, 0x09, 0x09, 0x09, 0x06,// 0x50 - 'P'.
   0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e,// 0x51 - 'Q'.
   0x00, 0x7f, 0x09, 0x09, 0x19, 0x66,// 0x52 - 'R'.
   0x00, 0x26, 0x49, 0x49, 0x49, 0x32,// 0x53 - 'S'.
   0x00, 0x01, 0x01, 0x7f, 0x01, 0x01,// 0x54 - 'T'.
   0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f,// 0x55 - 'U'.
   0x00, 0x1f, 0x20, 0x40, 0x20, 0x1f,// 0x56 - 'V'.
   0x00, 0x3f, 0x40, 0x3c, 0x40, 0x3f,// 0x57 - 'W'.
   0x00, 0x63, 0x14, 0x08, 0x14, 0x63,// 0x58 - 'X'.
   0x00, 0x07, 0x08, 0x70, 0x08, 0x07,// 0x59 - 'Y'.
   0x00, 0x71, 0x49, 0x45, 0x43, 0x00,// 0x5a - 'Z'.
   0x00, 0x00, 0x7f, 0x41, 0x41, 0x00,// 0x5b - '['.
   0x00, 0x02, 0x04, 0x08, 0x10, 0x20,// 0x5c - '\'.
   0x00, 0x00, 0x41, 0x41, 0x7f, 0x00,// 0x5d - ']'.

//замена домик на градус     0x00, 0x04, 0x02, 0x01, 0x02, 0x04,// 0x5e - '^'.
0x00, 0x06, 0x09, 0x09, 0x06, 0x00,// 0xb7 - маленький кружок вверху.

   0x80, 0x80, 0x80, 0x80, 0x80, 0x80,// 0x5f - '_'.
   0x00, 0x00, 0x03, 0x07, 0x00, 0x00,// 0x60 - обратный апостроф.
   0x00, 0x20, 0x54, 0x54, 0x54, 0x78,// 0x61 - 'a'.
   0x00, 0x7f, 0x44, 0x44, 0x44, 0x38,// 0x62 - 'b'.
   0x00, 0x38, 0x44, 0x44, 0x44, 0x28,// 0x63 - 'c'.
   0x00, 0x38, 0x44, 0x44, 0x44, 0x7f,// 0x64 - 'd'.
   0x00, 0x38, 0x54, 0x54, 0x54, 0x08,// 0x65 - 'e'.
   0x00, 0x08, 0x7e, 0x09, 0x09, 0x00,// 0x66 - 'f'.
   0x00, 0x18, 0xa4, 0xa4, 0xa4, 0x7c,// 0x67 - 'g'.
   0x00, 0x7f, 0x04, 0x04, 0x78, 0x00,// 0x68 - 'h'.
   0x00, 0x00, 0x00, 0x7d, 0x40, 0x00,// 0x69 - 'i'.
   0x00, 0x40, 0x80, 0x84, 0x7d, 0x00,// 0x6a - 'j'.
   0x00, 0x7f, 0x10, 0x28, 0x44, 0x00,// 0x6b - 'k'.
   0x00, 0x00, 0x00, 0x7f, 0x40, 0x00,// 0x6c - 'l'.
   0x00, 0x7c, 0x04, 0x18, 0x04, 0x78,// 0x6d - 'm'.
   0x00, 0x7c, 0x04, 0x04, 0x78, 0x00,// 0x6e - 'n'.
   0x00, 0x38, 0x44, 0x44, 0x44, 0x38,// 0x6f - 'o'.
   0x00, 0xfc, 0x44, 0x44, 0x44, 0x38,// 0x70 - 'p'.
   0x00, 0x38, 0x44, 0x44, 0x44, 0xfc,// 0x71 - 'q'.
   0x00, 0x44, 0x78, 0x44, 0x04, 0x08,// 0x72 - 'r'.
   0x00, 0x08, 0x54, 0x54, 0x54, 0x20,// 0x73 - 's'.
   0x00, 0x04, 0x3e, 0x44, 0x24, 0x00,// 0x74 - 't'.
   0x00, 0x3c, 0x40, 0x20, 0x7c, 0x00,// 0x75 - 'u'.
   0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c,// 0x76 - 'v'.
   0x00, 0x3c, 0x60, 0x30, 0x60, 0x3c,// 0x77 - 'w'.
   0x00, 0x6c, 0x10, 0x10, 0x6c, 0x00,// 0x78 - 'x'.
   0x00, 0x9c, 0xa0, 0x60, 0x3c, 0x00,// 0x79 - 'y'.
   0x00, 0x64, 0x54, 0x54, 0x4c, 0x00,// 0x7a - 'z'.
   0x00, 0x08, 0x3e, 0x41, 0x41, 0x00,// 0x7b - '{'.
   0x00, 0x00, 0x00, 0x77, 0x00, 0x00,// 0x7c - '|'.
   0x00, 0x00, 0x41, 0x41, 0x3e, 0x08,// 0x7d - '}'.
   0x00, 0x02, 0x01, 0x02, 0x01, 0x00,// 0x7e - '~'.
	 0x00, 0x3c, 0x26, 0x23, 0x26, 0x3c,// 0x7f - "домик".
   0x44, 0x11, 0x44, 0x11, 0x44, 0x11,// 0x80 - сетка из точек разреженная.
   0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55,// 0x81 - сетка из точек густая.
   0xbb, 0xee, 0xbb, 0xee, 0xbb, 0xee,// 0x82 - сетка из черточек.
   0x00, 0x00, 0x00, 0xff, 0x00, 0x00,// 0x83 - символы рамок псевдографики - вертикальная черта.
   0x08, 0x08, 0x08, 0xff, 0x00, 0x00,// 0x84 - псевдографика - вертикальная черта с отводом по центру влево.
   0x0a, 0x0a, 0x0a, 0xff, 0x00, 0x00,// 0x85 - псевдографика - вертикальная черта с двойным отводом по центру влево.
   0x08, 0xff, 0x00, 0xff, 0x00, 0x00,// 0x86 - псевдографика - двойная вертикальная черта с отводом по центру влево.
   0x08, 0xf8, 0x08, 0xf8, 0x00, 0x00,// 0x87 - псевдографика - верхний правый угол с двойной вертикальной чертой.
   0x0a, 0x0a, 0x0a, 0xfe, 0x00, 0x00,// 0x88 - псевдографика - верхний правый угол с двойной горизонтальной чертой.
   0x0a, 0xfb, 0x00, 0xff, 0x00, 0x00,// 0x89 - псевдографика - двойная вертикальная черта с двойным отводом по центру влево.
   0x00, 0xff, 0x00, 0xff, 0x00, 0x00,// 0x8a - псевдографика - двойная вертикальная черта.
   0x0a, 0xfa, 0x02, 0xfe, 0x00, 0x00,// 0x8b - псевдографика - двойной верхний правый угол.
   0x0a, 0x0b, 0x08, 0x0f, 0x00, 0x00,// 0x8c - псевдографика - двойной нижний правый угол.
   0x08, 0x0f, 0x08, 0x0f, 0x00, 0x00,// 0x8d - псевдографика - нижний правый угол с двойной вертикальной чертой.
   0x0a, 0x0a, 0x0a, 0x0f, 0x00, 0x00,// 0x8e - псевдографика - нижний правый угол с двойной горизонтальной чертой.
   0x08, 0x08, 0x08, 0xf8, 0x00, 0x00,// 0x8f - псевдографика - верхний правый угол.
   0x00, 0x00, 0x00, 0x0f, 0x08, 0x08,// 0x90 - псевдографика - нижний левый угол.
   0x08, 0x08, 0x08, 0x0f, 0x08, 0x08,// 0x91 - псевдографика - горизонтальная черта с отводом по центру вверх.
   0x08, 0x08, 0x08, 0xf8, 0x08, 0x08,// 0x92 - псевдографика - горизонтальная черта с отводом по центру вниз.
   0x00, 0x00, 0x00, 0xff, 0x08, 0x08,// 0x93 - псевдографика - вертикальная черта с отводом по центру вправо.
   0x08, 0x08, 0x08, 0x08, 0x08, 0x08,// 0x94 - псевдографика - горизонтальная черта по центру.
   0x08, 0x08, 0x08, 0xff, 0x08, 0x08,// 0x95 - псевдографика - перекрестие.
   0x00, 0x00, 0x00, 0xff, 0x0a, 0x0a,// 0x96 - псевдографика - вертикальная черта с двойным отводом по центру вправо.
   0x00, 0xff, 0x00, 0xff, 0x08, 0x08,// 0x97 - псевдографика - двойная вертикальная черта с отводом по центру вправо.
   0x00, 0x0f, 0x08, 0x0b, 0x0a, 0x0a,// 0x98 - псевдографика - двойной нижний левый угол.
   0x00, 0xfe, 0x02, 0xfa, 0x0a, 0x0a,// 0x99 - псевдографика - двойной верхний левый угол.
   0x0a, 0x0b, 0x08, 0x0b, 0x0a, 0x0a,// 0x9a - псевдографика - двойная горизонтальная черта с двойным отводом по центру вверх.
   0x0a, 0xfa, 0x02, 0xfa, 0x0a, 0x0a,// 0x9b - псевдографика - двойная горизонтальная черта с двойным отводом по центру вниз.
   0x00, 0xff, 0x00, 0xfb, 0x0a, 0x0a,// 0x9c - псевдографика - двойная вертикальная черта с двойным отводом по центру вправо.
   0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,// 0x9d - псевдографика - двойная горизонтальная черта по центру.
   0x0a, 0xfb, 0x00, 0xfb, 0x0a, 0x0a,// 0x9e - псевдографика - двойное перекрестие.
   0x0a, 0x0a, 0x0a, 0x0b, 0x0a, 0x0a,// 0x9f - псевдографика - двойная горизонтальная черта с отводом по центру вверх.
   0x08, 0x0f, 0x08, 0x0f, 0x08, 0x08,// 0xa0 - псевдографика - горизонтальная черта с двойным отводом по центру вверх.
   0x0a, 0x0a, 0x0a, 0xfa, 0x0a, 0x0a,// 0xa1 - псевдографика - двойная горизонтальная черта с отводом по центру вниз.
   0x08, 0xf8, 0x08, 0xf8, 0x08, 0x08,// 0xa2 - псевдографика - горизонтальная черта с двойным отводом по центру вниз.
   0x00, 0x0f, 0x08, 0x0f, 0x08, 0x08,// 0xa3 - псевдографика - нижний левый угол, двойная вертикальная черта.
   0x00, 0x00, 0x00, 0x0f, 0x0a, 0x0a,// 0xa4 - псевдографика - нижний левый угол, двойная горизонтальная черта.
   0x00, 0x00, 0x00, 0xfe, 0x0a, 0x0a,// 0xa5 - псевдографика - верхний левый угол, двойная горизонтальная черта.
   0x00, 0xf8, 0x08, 0xf8, 0x08, 0x08,// 0xa6 - псевдографика - верхний левый угол, двойная вертикальная черта.
   0x08, 0xff, 0x08, 0xff, 0x08, 0x08,// 0xa7 - псевдографика - двойная вертикальная черта по центру с отводами вправо и влево.
   0x00, 0x7e, 0x4b, 0x4a, 0x4b, 0x42,// 0xa8 - 'Ё'.
   0x0a, 0x0a, 0x0a, 0xff, 0x0a, 0x0a,// 0xa9 - псевдографика - двойная горизонтальная черта по центру с отводами вверх и вниз.
   0x08, 0x08, 0x08, 0x0f, 0x00, 0x00,// 0xaa - псевдографика - нижний правый угол.
   0x00, 0x00, 0x00, 0xf8, 0x08, 0x08,// 0xab - псевдографика - верхний левый угол.
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff,// 0xac - псевдографика - закрашенное знакоместо.
   0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,// 0xad - псевдографика - закрашенная нижняя половина знакоместа.
   0xff, 0xff, 0xff, 0x00, 0x00, 0x00,// 0xae - псевдографика - закрашенная левая половина знакоместа.
   0x00, 0x00, 0x00, 0xff, 0xff, 0xff,// 0xaf - псевдографика - закрашенная правая половина знакоместа.
   0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,// 0xb0 - псевдографика - закрашенная верхняя половина знакоместа.
   0x00, 0x3e, 0x49, 0x49, 0x41, 0x22,// 0xb1 - зеркальная 'Э'.
   0x00, 0x38, 0x54, 0x54, 0x44, 0x28,// 0xb2 - зеркальная 'э'.
   0x00, 0x01, 0x40, 0x7e, 0x40, 0x01,// 0xb3 - 'I' с двумя точками вверху.
   0x00, 0x00, 0x01, 0x7c, 0x41, 0x00,// 0xb4 - 'i' с двумя точками вверху.
   0x00, 0x27, 0x48, 0x4b, 0x48, 0x3f,// 0xb5 - 'Y' с тильдой вверху ('~').
   0x00, 0x9d, 0xa2, 0x62, 0x3d, 0x00,// 0xb6 - 'y' с тильдой вверху ('~').
   0x00, 0x06, 0x09, 0x09, 0x06, 0x00,// 0xb7 - маленький кружок вверху.
   0x00, 0x38, 0x55, 0x54, 0x55, 0x08,// 0xb8 - 'ё'.
   0x00, 0x00, 0x18, 0x18, 0x00, 0x00,// 0xb9 - большой закрашенный круг по центру.
   0x00, 0x00, 0x08, 0x00, 0x00, 0x00,// 0xba - маленький закрашенный круг по центру.
   0x00, 0x30, 0x40, 0x3e, 0x02, 0x02,// 0xbb - символ корня квадратного.
   0x7f, 0x06, 0x18, 0x7f, 0x13, 0x13,// 0xbc - '№'.
   0x2a, 0x3e, 0x14, 0x14, 0x3e, 0x2a,// 0xbd - "солнце".
   0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00,// 0xbe - закрашенный квадрат по центру.
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00,// 0xbf - пустое знакоместо.
   0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e,// 0xc0 - 'А'.
   0x00, 0x7f, 0x49, 0x49, 0x49, 0x31,// 0xc1 - 'Б'.
   0x00, 0x7f, 0x49, 0x49, 0x49, 0x36,// 0xc2 - 'В'.
   0x00, 0x7f, 0x01, 0x01, 0x01, 0x01,// 0xc3 - 'Г'.
   0xc0, 0x7e, 0x41, 0x41, 0x7f, 0xc0,// 0xc4 - 'Д'.
   0x00, 0x7f, 0x49, 0x49, 0x49, 0x41,// 0xc5 - 'Е'.
   0x00, 0x77, 0x08, 0x7f, 0x08, 0x77,// 0xc6 - 'Ж'.
   0x22, 0x49, 0x49, 0x49, 0x36, 0x00,// 0xc7 - 'З'.
   0x00, 0x7f, 0x20, 0x10, 0x08, 0x7f,// 0xc8 - 'И'.
   0x00, 0x7e, 0x21, 0x11, 0x09, 0x7e,// 0xc9 - 'Й'.
   0x00, 0x7f, 0x08, 0x14, 0x22, 0x41,// 0xca - 'К'.
   0x00, 0x40, 0x7e, 0x01, 0x01, 0x7f,// 0xcb - 'Л'.
   0x00, 0x7f, 0x02, 0x04, 0x02, 0x7f,// 0xcc - 'М'.
   0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f,// 0xcd - 'Н'.
   0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e,// 0xce - 'О'.
   0x00, 0x7f, 0x01, 0x01, 0x01, 0x7f,// 0xcf - 'П'.
   0x00, 0x7f, 0x09, 0x09, 0x09, 0x06,// 0xd0 - 'Р'.
   0x00, 0x3e, 0x41, 0x41, 0x41, 0x22,// 0xd1 - 'С'.
   0x00, 0x01, 0x01, 0x7f, 0x01, 0x01,// 0xd2 - 'Т'.
   0x00, 0x27, 0x48, 0x48, 0x48, 0x3f,// 0xd3 - 'У'.
   0x00, 0x0e, 0x11, 0x7f, 0x11, 0x0e,// 0xd4 - 'Ф'.
   0x00, 0x63, 0x14, 0x08, 0x14, 0x63,// 0xd5 - 'Х'.
   0x00, 0x7f, 0x40, 0x40, 0x7f, 0xc0,// 0xd6 - 'Ц'.
   0x00, 0x07, 0x08, 0x08, 0x08, 0x7f,// 0xd7 - 'Ч'.
   0x00, 0x7f, 0x40, 0x7f, 0x40, 0x7f,// 0xd8 - 'Ш'.
   0x00, 0x7f, 0x40, 0x7f, 0x40, 0xff,// 0xd9 - 'Щ'.
   0x03, 0x01, 0x7f, 0x48, 0x48, 0x30,// 0xda - 'Ъ'.
   0x00, 0x7f, 0x48, 0x48, 0x30, 0x7f,// 0xdb - 'Ы'.
   0x00, 0x7f, 0x48, 0x48, 0x48, 0x30,// 0xdc - 'Ь'.
   0x00, 0x22, 0x41, 0x49, 0x49, 0x3e,// 0xdd - 'Э'.
   0x00, 0x7f, 0x08, 0x3e, 0x41, 0x3e,// 0xde - 'Ю'.
   0x00, 0x66, 0x19, 0x09, 0x09, 0x7f,// 0xdf - 'Я'.
   0x00, 0x20, 0x54, 0x54, 0x54, 0x78,// 0xe0 - 'а'.
   0x00, 0x3c, 0x4a, 0x4a, 0x4a, 0x31,// 0xe1 - 'б'.
   0x00, 0x7c, 0x54, 0x54, 0x54, 0x28,// 0xe2 - 'в'.
   0x00, 0x7c, 0x04, 0x04, 0x0c, 0x00,// 0xe3 - 'г'.
   0xc0, 0x78, 0x44, 0x44, 0x7c, 0xc0,// 0xe4 - 'д'.
   0x00, 0x38, 0x54, 0x54, 0x54, 0x08,// 0xe5 - 'е'.
   0x00, 0x6c, 0x10, 0x7c, 0x10, 0x6c,// 0xe6 - 'ж'.
   0x00, 0x28, 0x44, 0x54, 0x54, 0x28,// 0xe7 - 'з'.
   0x00, 0x7c, 0x20, 0x10, 0x08, 0x7c,// 0xe8 - 'и'.
   0x00, 0x7c, 0x20, 0x12, 0x0a, 0x7c,// 0xe9 - 'й'.
   0x00, 0x7c, 0x10, 0x28, 0x44, 0x00,// 0xea - 'к'.
   0x40, 0x38, 0x04, 0x04, 0x7c, 0x00,// 0xeb - 'л'.
   0x00, 0x7c, 0x08, 0x10, 0x08, 0x7c,// 0xec - 'м'.
   0x00, 0x7c, 0x10, 0x10, 0x10, 0x7c,// 0xed - 'н'.
   0x00, 0x38, 0x44, 0x44, 0x44, 0x38,// 0xee - 'о'.
   0x00, 0x7c, 0x04, 0x04, 0x04, 0x7c,// 0xef - 'п'.
   0x00, 0xfc, 0x44, 0x44, 0x44, 0x38,// 0xf0 - 'р'.
   0x00, 0x38, 0x44, 0x44, 0x44, 0x28,// 0xf1 - 'с'.
   0x00, 0x04, 0x04, 0x7c, 0x04, 0x04,// 0xf2 - 'т'.
   0x00, 0x9c, 0xa0, 0x60, 0x3c, 0x00,// 0xf3 - 'у'.
   0x00, 0x18, 0x24, 0x7c, 0x24, 0x18,// 0xf4 - 'ф'.
   0x00, 0x6c, 0x10, 0x10, 0x6c, 0x00,// 0xf5 - 'х'.
   0x00, 0x7c, 0x40, 0x40, 0x7c, 0xc0,// 0xf6 - 'ц'.
   0x00, 0x0c, 0x10, 0x10, 0x10, 0x7c,// 0xf7 - 'ч'.
   0x00, 0x7c, 0x40, 0x7c, 0x40, 0x7c,// 0xf8 - 'ш'.
   0x00, 0x7c, 0x40, 0x7c, 0x40, 0xfc,// 0xf9 - 'щ'.
   0x0c, 0x04, 0x7c, 0x50, 0x50, 0x20,// 0xfa - 'ъ'.
   0x00, 0x7c, 0x50, 0x50, 0x20, 0x7c,// 0xfb - 'ы'.
   0x00, 0x7c, 0x50, 0x50, 0x50, 0x20,// 0xfc - 'ь'.
   0x00, 0x28, 0x44, 0x54, 0x54, 0x38,// 0xfd - 'э'.
   0x00, 0x7c, 0x10, 0x38, 0x44, 0x38,// 0xfe - 'ю'.
   0x00, 0x48, 0x34, 0x14, 0x14, 0x7c// 0xff - 'я'.
 };

const unsigned char digit_16x24[] = {
0x00, 0xFA, 0xFB, 0xFF, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xFC, 0xFE, 0xFE, 0x00,  // 0
0x00, 0xFF, 0xF7, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0xFF, 0xF7, 0x00,
0x00, 0x0F, 0x6F, 0x7F, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1F, 0x3F, 0x3F, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00,  // 1
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0xF7, 0xF7, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00,

0x00, 0x02, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xFC, 0xFE, 0xFE, 0x00,  // 2
0x00, 0xF0, 0xF0, 0xE8, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x0B, 0x07, 0x07, 0x00,
0x00, 0x0F, 0x6F, 0x7F, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00,

0x00, 0x02, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xFC, 0xFE, 0xFE, 0x00,  // 3
0x00, 0x00, 0x08, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xEB, 0xFF, 0xF7, 0x00,
0x00, 0x20, 0x60, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1F, 0x3F, 0x3F, 0x00,

0x00, 0xFE, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFE, 0x00,  // 4
0x00, 0x07, 0x07, 0x0B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xEB, 0xF7, 0xF7, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x3F, 0x00,

0x00, 0xFA, 0xFB, 0xFF, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,  // 5
0x00, 0x07, 0x07, 0x0B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xE8, 0xF0, 0xF0, 0x00,
0x00, 0x20, 0x60, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1F, 0x3F, 0x3F, 0x00,

0x00, 0xFA, 0xFB, 0xFF, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,  // 6
0x00, 0xFF, 0xF7, 0xEB, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xE8, 0xF0, 0xF0, 0x00,
0x00, 0x0F, 0x6F, 0x7F, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1F, 0x3F, 0x3F, 0x00,

0x00, 0xFA, 0xFB, 0xFF, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xFC, 0xFE, 0xFE, 0x00,  // 7
0x00, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0xFF, 0xF7, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x3F, 0x00,

0x00, 0xFA, 0xFB, 0xFF, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xFC, 0xFE, 0xFE, 0x00,  // 8
0x00, 0xFF, 0xF7, 0xEB, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xEB, 0xFF, 0xF7, 0x00,
0x00, 0x0F, 0x6F, 0x7F, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1F, 0x3F, 0x3F, 0x00,

0x00, 0xFA, 0xFB, 0xFF, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xFC, 0xFE, 0xFE, 0x00,  // 9
0x00, 0x07, 0x07, 0x0B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xEB, 0xFF, 0xF7, 0x00,
0x00, 0x20, 0x60, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1F, 0x3F, 0x3F, 0x00,

0x00, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0xF8, 0xF8, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // :
0x00, 0x00, 0x00, 0x00, 0xC3, 0xE7, 0xE7, 0xE7, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x1F, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x01, 0x03, 0x07, 0x07, 0x07, 0x07, 0xFB, 0xFD, 0xFB, 0x07, 0x07, 0x07, 0x07, 0x03, 0x01, 0x00, // Т
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0xFF, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFE, 0xFF, 0x00, // Н
0x00, 0xFF, 0xEF, 0xD7, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0xD7, 0xEF, 0xFF, 0x00,
0x00, 0xFF, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0xFF, 0x00,

0x00, 0xFE, 0xFD, 0xFB, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xFA, 0xFC, 0xF8, 0x00, // Р
0x00, 0xFF, 0xEF, 0xD7, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x17, 0x0F, 0x07, 0x00,
0x00, 0xFF, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0xFF, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFE, 0xFF, 0x00, // Ч
0x00, 0x07, 0x0F, 0x17, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x10, 0xEF, 0xEF, 0xFF, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0xFF, 0x00,

0x00, 0xFE, 0xFD, 0xFB, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xFB, 0xFD, 0xFE, 0x00, // П
0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
0x00, 0xFF, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0xFF, 0x00,

0x00, 0xF8, 0xFC, 0xFA, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x7A, 0x7C, 0x78, 0x00, // С
0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x1F, 0x3F, 0x5F, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x5E, 0x3E, 0x1E, 0x00,

0x00, 0x00, 0xFE, 0xFD, 0xFB, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xFA, 0xFC, 0xF8, // В
0x00, 0x00, 0xFF, 0xFB, 0xF5, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xF5, 0xFB, 0xF1,
0x00, 0x00, 0x7F, 0xBF, 0xDF, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x5F, 0x3F, 0x1F,

0x00, 0x00, 0xFE, 0xFD, 0xFB, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x01, 0x00, // Б
0x00, 0x00, 0xFF, 0xFB, 0xF5, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0,
0x00, 0x00, 0x7F, 0xBF, 0xDF, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x5F, 0x3F, 0x1F,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};

const unsigned char GOST_16x32 [] = {
0x00, 0xC0, 0xF0, 0xF0, 0x38, 0x38, 0x18, 0x18, 0x18, 0x38, 0x38, 0xF0, 0xF0, 0xE0, 0x00, 0x00,
0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
0x00, 0x07, 0x0F, 0x1F, 0x3C, 0x38, 0x38, 0x38, 0x38, 0x38, 0x3C, 0x1E, 0x0F, 0x07, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x03, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00,

0x00, 0xE0, 0xF0, 0x70, 0x38, 0x38, 0x18, 0x18, 0x38, 0x38, 0x70, 0xF0, 0xE0, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xFD, 0x7F, 0x1F, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF8, 0x7E, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x38, 0x3E, 0x3F, 0x3F, 0x3B, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x00, 0x00,

0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x98, 0xF8, 0xF8, 0x78, 0x38, 0x00, 0x00,
0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xFC, 0xDE, 0xCF, 0xC7, 0xC1, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0xFF, 0xFE, 0x00, 0x00,
0x00, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x1C, 0x1F, 0x0F, 0x03, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0xF8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xE0, 0xFC, 0xFF, 0x1F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xF0, 0xFE, 0xFF, 0xCF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFE, 0xFF, 0xFE, 0xC0, 0xC0, 0xC0, 0x00,
0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1F, 0x3F, 0x3F, 0x01, 0x01, 0x01, 0x00,

0x00, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00,
0x00, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFE, 0x00, 0x00,
0x00, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x1C, 0x1F, 0x0F, 0x07, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x78, 0x38, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
0x00, 0xF0, 0xFC, 0xFF, 0xCF, 0xC3, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00,
0x00, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFF, 0xFF, 0x00, 0x00,
0x00, 0x07, 0x0F, 0x1E, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x1C, 0x1F, 0x0F, 0x00, 0x00,

0x00, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0xF8, 0x78, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF0, 0xFF, 0x7F, 0x07, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0xFF, 0x3F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x3F, 0x1F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x80, 0xE0, 0xF0, 0x78, 0x38, 0x38, 0x18, 0x18, 0x38, 0x38, 0x70, 0xF0, 0xE0, 0x80, 0x00,
0x00, 0x0F, 0xBF, 0xFF, 0xF0, 0xE0, 0xE0, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xFF, 0x3F, 0x0F, 0x00,
0xFC, 0xFF, 0xFF, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0xFF, 0xFE, 0xFC,
0x03, 0x07, 0x0F, 0x1E, 0x1C, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x1C, 0x1E, 0x0F, 0x07, 0x01,

0x00, 0xE0, 0xF0, 0xF8, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x38, 0x78, 0xF0, 0xE0, 0x00, 0x00,
0x00, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x87, 0xE7, 0xFF, 0x7F, 0x1F, 0x00, 0x00,
0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x1C, 0x1E, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1E, 0x3F, 0x3F, 0x3F, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xF0, 0xF8, 0xF8, 0xF0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x07, 0x07, 0x07, 0x3F, 0x7F, 0x7F, 0x3F, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};

const unsigned char Times_16x24[] = {
  0x00,0x00,0xC0,0xF0,0xF8,0xF8,0x0C,0x04,0x04,0x0C,0xF8,0xF8,0xF0,0xC0,0x00,0x00,
  0x00,0xFE,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
  0x00,0x01,0x07,0x1F,0x3F,0x3F,0x60,0x40,0x40,0x60,0x3F,0x3F,0x1F,0x07,0x01,0x00,

  0x00,0x00,0x00,0x20,0x30,0x30,0xF8,0xF8,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x40,0x40,0x60,0x7F,0x7F,0x7F,0x7F,0x60,0x40,0x40,0x00,0x00,0x00,

  0x00,0x00,0xE0,0x70,0x38,0x38,0x3C,0x3C,0x7C,0xFC,0xFC,0xF8,0xF0,0xE0,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xE0,0x3F,0x1F,0x0F,0x03,0x00,0x00,
  0x00,0x40,0x60,0x70,0x78,0x7C,0x7E,0x7B,0x79,0x78,0x78,0x78,0x78,0x7C,0x06,0x00,

  0x00,0x00,0x20,0x30,0x18,0x08,0x0C,0x0C,0x0C,0x1C,0xFC,0xF8,0xF8,0x70,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x0C,0x0E,0x1F,0x7F,0xFE,0xFC,0xF8,0xF0,0x00,
  0x00,0x18,0x3C,0x7C,0x78,0x70,0x60,0x60,0x60,0x20,0x30,0x1F,0x1F,0x07,0x03,0x00,

  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0xF0,0xF8,0xFC,0xFC,0x00,0x00,0x00,
  0x00,0xC0,0xA0,0x90,0x88,0x86,0x81,0x80,0x80,0xFF,0xFF,0xFF,0xFF,0x80,0x80,0x00,
  0x00,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x7F,0x7F,0x7F,0x7F,0x03,0x03,0x00,

  0x00,0x00,0x00,0xC0,0x38,0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0x1C,0x04,0x00,
  0x00,0x08,0x0F,0x0F,0x0F,0x0F,0x0F,0x1E,0x1E,0x3E,0x3C,0x7C,0xF8,0xF0,0xE0,0x00,
  0x00,0x30,0x38,0x78,0x78,0x70,0x60,0x60,0x40,0x40,0x40,0x20,0x20,0x1F,0x07,0x00,

  0x00,0x00,0x00,0x00,0xC0,0xE0,0xE0,0x70,0x38,0x18,0x18,0x0C,0x0C,0x04,0x04,0x00,
  0x00,0xF0,0xFE,0xFF,0xFF,0x1F,0x07,0x04,0x04,0x0C,0x1C,0xFC,0xF8,0xF0,0xE0,0x00,
  0x00,0x03,0x0F,0x1F,0x3F,0x38,0x60,0x40,0x40,0x40,0x60,0x3F,0x3F,0x1F,0x07,0x00,

  0x00,0xC0,0x7C,0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0xFC,0xFC,0x1C,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xF8,0x3F,0x07,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x7E,0x0F,0x01,0x00,0x00,0x00,0x00,0x00,0x00,

  0x00,0xE0,0xF0,0xF8,0xF8,0x8C,0x04,0x04,0x04,0x04,0x04,0x1C,0xF8,0xF0,0xE0,0x00,
  0x00,0x01,0xC7,0xE7,0x6F,0x3F,0x1E,0x3E,0x7C,0xFC,0xFC,0xFE,0xF7,0xE3,0x81,0x00,
  0x00,0x0F,0x1F,0x3F,0x30,0x60,0x40,0x40,0x40,0x40,0x61,0x3F,0x3F,0x1F,0x07,0x00,

  0x00,0xC0,0xF0,0xF8,0xF8,0x0C,0x04,0x04,0x04,0x0C,0x38,0xF8,0xF0,0xE0,0x80,0x00,
  0x00,0x07,0x1F,0x3F,0x3F,0x78,0x60,0x40,0x40,0x40,0xC0,0xFF,0xFF,0xFF,0x3F,0x00,
  0x00,0x40,0x40,0x60,0x60,0x20,0x30,0x38,0x18,0x0E,0x0F,0x07,0x03,0x00,0x00,0x00,

  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 10 " "
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,


  0x38,0x44,0x82,0x82,0x44,0x38,0x80,0x80,0x40,0x40,0x40,0x40,0x80,0x00,0x80,0xC0,
  0x00,0xE0,0xF8,0x1E,0x07,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x0F,0x01,// 11 gr C
  0x00,0x03,0x0F,0x18,0x10,0x20,0x20,0x20,0x20,0x20,0x10,0x10,0x08,0x04,0x00,0x00,

  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0xC0,0xF8,0xF8,0xC0,0xC0,0xC0,// 12 "+"
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x07,0x00,0x00,0x00,

  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,// 13 "-"
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 14 ","
  0x07,0x0F,0x8F,0x7F,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,


};
const unsigned char courier_10x16[] = {
  0xF0,0xFC,0x0C,0x06,0x06,0x06,0x0C,0xFC,0xF0,0x00,
  0x07,0x1F,0x18,0x30,0x30,0x30,0x18,0x1F,0x07,0x00,

  0x00,0x0C,0x0C,0x0C,0xFE,0xFE,0x00,0x00,0x00,0x00,
  0x00,0x30,0x30,0x30,0x3F,0x3F,0x30,0x30,0x30,0x00,

  0x18,0x1C,0x0E,0x06,0x06,0x86,0xCE,0x7C,0x38,0x00,
  0x30,0x38,0x3C,0x36,0x33,0x31,0x30,0x30,0x30,0x00,

  0x00,0x0C,0x0C,0x06,0xC6,0xC6,0xC6,0xEE,0xFC,0x38,
  0x18,0x38,0x30,0x30,0x30,0x30,0x30,0x39,0x1F,0x0F,

  0x00,0x00,0x80,0xE0,0x70,0x1C,0x0E,0xFE,0xFE,0x00,
  0x00,0x07,0x07,0x06,0x06,0x36,0x36,0x3F,0x3F,0x36,

  0x00,0x00,0xFE,0xFE,0x66,0x66,0x66,0xE6,0xC6,0x80,
  0x00,0x18,0x18,0x30,0x30,0x30,0x30,0x38,0x1F,0x0F,

  0x00,0xE0,0xF8,0x9C,0xCC,0xCE,0xC6,0xC6,0x86,0x06,
  0x00,0x07,0x1F,0x19,0x30,0x30,0x30,0x39,0x1F,0x0F,

  0x00,0x0E,0x0E,0x06,0x06,0x06,0x06,0xE6,0xFE,0x1E,
  0x00,0x00,0x00,0x00,0x00,0x38,0x3F,0x07,0x00,0x00,

  0x00,0x38,0xFC,0xEE,0xC6,0xC6,0xC6,0xEE,0xFC,0x38,
  0x00,0x0F,0x1F,0x39,0x30,0x30,0x30,0x39,0x1F,0x0F,

  0x00,0x78,0xFC,0xCE,0x86,0x86,0x86,0xCC,0xFC,0xF0,
  0x00,0x30,0x30,0x31,0x31,0x39,0x19,0x1C,0x0F,0x03,

  0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,
};


const unsigned char icons [] = {
0xFF, 0x7F, 0x1F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x80, 0xF8, 0xF0, 0xE0, 0xC0, 0x81, 0x01, 0x03, 0x03, 0x07, 0x0F, 0x1F, 0x7F, 0xFF,
0xC3, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0x3F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x83,
0xFF, 0xFE, 0xF8, 0xF0, 0xE3, 0xC7, 0xCF, 0x8F, 0x9F, 0x18, 0x00, 0x00, 0x00, 0x11, 0x1F, 0x9F, 0x8F, 0xC7, 0xC3, 0xE0, 0xF0, 0xF8, 0xFE, 0xFF,

0xFF, 0x7F, 0x1F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x0F, 0x1F, 0x7F, 0xFF,
0xC3, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x83,
0xFF, 0xFE, 0xF8, 0xF0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xE0, 0xF0, 0xF8, 0xFE, 0xFF,

0x80, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0xFE, 0xFE, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0x80,
0x01, 0x03, 0x07, 0x3F, 0xFC, 0xF8, 0xF0, 0xE0, 0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xE0, 0xF0, 0xF8, 0xFC, 0x3F, 0x07, 0x03, 0x01,
0x00, 0x00, 0x00, 0x00, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x7C, 0x7E, 0x7F, 0x7F, 0x0F, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFF, 0xFF, 0xFE, 0xFE, 0xFC,
0x00, 0xC0, 0xF0, 0xFC, 0xFE, 0xFE, 0x3F, 0x1F, 0x4F, 0xEF, 0xEF, 0xEF, 0xEF, 0xE7, 0xF2, 0xF8, 0xFC, 0xFE, 0x7F, 0x7F, 0x3F, 0x1F, 0x07, 0x01,
0x07, 0x1F, 0x3F, 0x7F, 0x7F, 0xF8, 0xF0, 0xE0, 0xE0, 0xE1, 0xE1, 0xF1, 0xF1, 0xFD, 0xFD, 0x7E, 0x3E, 0x0E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,

0xFF, 0x87, 0x03, 0x39, 0x39, 0x39, 0x39, 0x3C, 0x3C, 0x3C, 0x38, 0x79, 0xF9, 0x79, 0x79, 0x79, 0x39, 0x01, 0x83, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x02, 0x00, 0x38, 0x7F, 0x30, 0x00, 0x03, 0x03, 0x00, 0xF9, 0xFD, 0x7D, 0x19, 0xC3, 0xFF,
0xFF, 0xFF, 0xC0, 0x80, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF9, 0xFD, 0xFC, 0xFE, 0xFF, 0xFF,

0x00, 0xC0, 0xF0, 0x38, 0x18, 0x1C, 0xCE, 0xC7, 0xE3, 0x63, 0x03, 0xFF, 0xFF, 0x03, 0x03, 0xE3, 0xC7, 0x0E, 0x1C, 0x18, 0x38, 0xF0, 0xC0, 0x00,
0x00, 0xF7, 0xFF, 0x1C, 0x0C, 0xCC, 0xCC, 0x8C, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x61, 0x63, 0x63, 0x33, 0x38, 0xFF, 0xF7, 0x00,
0x00, 0x00, 0x03, 0x1F, 0x1E, 0x30, 0x30, 0x77, 0xC7, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xCC, 0xFE, 0x78, 0x30, 0x30, 0x1E, 0x1F, 0x03, 0x00, 0x00,

0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0x60, 0x70, 0xB0, 0xB0, 0x70, 0x60, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00,
0x00, 0x06, 0x07, 0x03, 0x39, 0x39, 0x9C, 0x0E, 0xC6, 0xF8, 0x7E, 0x67, 0x67, 0x7E, 0xF8, 0xC6, 0x0E, 0x9C, 0x39, 0x33, 0x03, 0x07, 0x06, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0C, 0x1E, 0x1E, 0x0C, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0x60, 0xB0, 0xB0, 0xB0, 0xB0, 0x60, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00,
0x00, 0x06, 0x07, 0x03, 0x39, 0x39, 0x9C, 0xCE, 0x00, 0xCF, 0x9F, 0x99, 0x99, 0xF9, 0xF3, 0x08, 0xCE, 0x9C, 0x39, 0x33, 0x03, 0x07, 0x06, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0D, 0x1D, 0x1D, 0x0D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

#define DEFAULT_PIN_CONIF /* use defined pin config */
#ifdef DEFAULT_PIN_CONIF
#define LCD_PIN_SCE 15
#define LCD_PIN_SDIN 13
#define LCD_PIN_RESET 12
#define LCD_PIN_SCLK 14
#else 
#error define pin-out attached to arduino. 
#endif
/*
  contrast can be varied by or'ing with LED_VOB_LSB|contrast value
  for info see LED_VOB_LSB
*/
#define LCD_CONTRAST 0x3f
/*
	contain the screen height and width in pixel
*/
#define SCREEN_HEIGHT 65
#define SCREEN_WIDTH 96
/*
	flags used to understand by lcd if the bits is taken as command or store in ram
*/
#define FLAG_CMD LOW
#define FLAG_DATA HIGH
/*
  some constants that will be ored with command to effect
    ON : turn on the command
    OFF : turn off the command
    DISPLAY: turn display on/of used with LCD_MODE only, (LCD_MODE|DISPLAY|ON/OFF)
    ALL : turn on all , only used with LCD_MODE , (LCD_MODE|ALL|ON/OFF) use off for normal display
    INVERT : invert pixels, only used with LCD_MODE , (LCD_MODE|INVERT|ON/OFF) , it bring lcd into normal form use off
  *note: you can use (LCD_MODE|ALL/INVERT|OFF)  to bring lcd into normal mode
*/
#define ON 0x01
#define OFF 0x00
#define ALL 0x04
#define INVERT 0x06
#define DISPLAY 0x0E
/*
	Command list of list
        LCD_NOP                                 : no operation
	LCD_MODE				: lcd  mode, LCD_MODE|(ALL/INVERT/DISPLAY|ON/OFF)
	LCD_VOB_MSB				: use LCD_VOB_MSB|0x04 ,the value after | is a mystry,dont mess(previos notice)
	LCD_VOB_LSB				: use LCD_VOB_LSB|(contrast value,0x00 to 0x1F)
	LCD_CHARGE_PUMP_ON 		: read the datasheet , i could nt understand
								voltage muliplication          value
								     X2							0x00
									 X3							0x01
									 X4							0x02
									 X5							0x03
	LCD_RAM_ADDR_MODE		: use LCD_RAM_ADDR_MODE|(conditon ,OFF/ON),write in RAM,
								 OFF : write horizontally (by default)
								 ON : write vertically
	LCD_CHANGE_ROW_LSB				: accessed by LCD_ROW_LSB|(b3 b2 b1 b0), last four bits of the address
	LCD_CHANGE_ROW_MSB				: accessed by LCD_ROW_MSB|(b6 b5 b4),first 3 bits of the address; alias is 0x18
	LCD_CHANGE_COL					: move to col,LCD_COL|(b2 b1 b0)
	LCD_MIRROR_Y			: mirror on y axis , use(LCD_MIRROR_Y| condition 0x08 or OFF)
								turn on/enable mirroring, conditon->0x08 , dont use ON because its 0x01
								turn off/disable mirroring, conditon->OFF
	LCD_MIRROR_X			: turn on mirroring on x axis . this is a speical instruction & 
                                          i couldt found|dont exists reset counter; its alias is 0xA0,didnt worked,
                                          and datasheet says , NOP: MX is pad selected?
	LCD_EXT_OSC				: use a external oscillator (LCD_EXT_OSC|ON / OFF)
	LCD_SOFT_RESET			: internal or software reset
 * special instruction: use 0x08 not ON for enabling LCD_MIRROR_X
*/
#define LCD_NOP 0xE3
#define LCD_MODE 0xA0
#define LCD_VOB_MSB 0x20
#define LCD_VOB_LSB 0x80
#define LCD_CHARGE_PUMP_ON 0x2F
#define LCD_RAM_ADDR_MODE 0xAA
#define LCD_CHANGE_ROW_LSB 0x00
#define LCD_CHANGE_ROW_MSB 0x10
#define LCD_CHANGE_COL 0xB0
#define LCD_MIRROR_Y 0xC0
#define LCD_MIRROR_X 0xA0
#define LCD_EXT_OSC 0x3A
#define LCD_SOFT_RESET 0xE2
//#define LCD_DATA_DISPLAY_LEN , read page no 27
//#define LCD_FACTORY_DEFAULT ,read page no 27 of datasheet
//#define LCD_REFRESH_RATE ,read page 27,29 of datasheet
/*----------------------------------------------------------------------------------------------*/
#define CHAR_WIDTH 6
#define CHAR_HEIGHT 8
static const byte ASCII[][CHAR_WIDTH] ={
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00} // 20
  ,{0x00, 0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
  ,{0x00, 0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
  ,{0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
  ,{0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
  ,{0x00, 0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
  ,{0x00, 0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
  ,{0x00, 0x00, 0x05, 0x03, 0x00, 0x00} // 27 '
  ,{0x00, 0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
  ,{0x00, 0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
  ,{0x00, 0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
  ,{0x00, 0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
  ,{0x00, 0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
  ,{0x00, 0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
  ,{0x00, 0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
  ,{0x00, 0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
  ,{0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
  ,{0x00, 0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
  ,{0x00, 0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
  ,{0x00, 0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
  ,{0x00, 0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
  ,{0x00, 0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
  ,{0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
  ,{0x00, 0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
  ,{0x00, 0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
  ,{0x00, 0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
  ,{0x00, 0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
  ,{0x00, 0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
  ,{0x00, 0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
  ,{0x00, 0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
  ,{0x00, 0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
  ,{0x00, 0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
  ,{0x00, 0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
  ,{0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
  ,{0x00, 0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
  ,{0x00, 0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
  ,{0x00, 0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
  ,{0x00, 0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
  ,{0x00, 0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
  ,{0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
  ,{0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
  ,{0x00, 0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
  ,{0x00, 0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
  ,{0x00, 0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
  ,{0x00, 0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
  ,{0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
  ,{0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
  ,{0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
  ,{0x00, 0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
  ,{0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
  ,{0x00, 0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
  ,{0x00, 0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
  ,{0x00, 0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
  ,{0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
  ,{0x00, 0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
  ,{0x00, 0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
  ,{0x00, 0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
  ,{0x00, 0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
  ,{0x00, 0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
  ,{0x00, 0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
  ,{0x00, 0x02, 0x04, 0x08, 0x10, 0x20} // 5c ¥
  ,{0x00, 0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
  ,{0x00, 0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
  ,{0x00, 0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
  ,{0x00, 0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
  ,{0x00, 0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
  ,{0x00, 0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
  ,{0x00, 0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
  ,{0x00, 0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
  ,{0x00, 0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
  ,{0x00, 0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
  ,{0x00, 0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
  ,{0x00, 0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
  ,{0x00, 0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
  ,{0x00, 0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
  ,{0x00, 0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
  ,{0x00, 0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
  ,{0x00, 0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
  ,{0x00, 0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
  ,{0x00, 0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
  ,{0x00, 0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
  ,{0x00, 0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
  ,{0x00, 0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
  ,{0x00, 0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
  ,{0x00, 0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
  ,{0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
  ,{0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
  ,{0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
  ,{0x00, 0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
  ,{0x00, 0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
  ,{0x00, 0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
  ,{0x00, 0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
  ,{0x00, 0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
  ,{0x00, 0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
  ,{0x00, 0x10, 0x08, 0x08, 0x10, 0x08} // 7e ->
  ,{0x00, 0x78, 0x46, 0x41, 0x46, 0x78} // 7f <- 
};
/*
	LCD_GOTOXY():
		note:
			move to a new position
		tricks:
			use LCD_ROW() & LCD_COL()
*/	
#define lcd_gotoyx(ROW,COL)\ 
    lcd_row(ROW);\
	lcd_col(COL);
#define lcd_on() lcd_normal();
/*-----------------------*/
void lcd_string(char *);
void lcd_character(char);
void lcd_row(byte);
void lcd_col(byte);
void lcd_clear();
void lcd_refresh();
void lcd_init();
void lcd_write(byte,byte);
void lcd_all();
void lcd_invert();
void lcd_normal();
void lcd_off_partial();
void lcd_off();
void lcd_contrast(byte value); 

void char_24x16(unsigned int aDig, unsigned int aX, unsigned int aY);
/*----------------------------------------------------------------------------------------------*/
/*
	LCD_WRITE()
		note:
			send/write data to LCD
		trick:
			dont mess with it, i have prevous comment are
			LINE 1:
				dc is sampled with the first rising SCLK edge
			LINE 2:
				LCD enable
			LINE 3:
				First rising SCLK edge
			LINE 5:
				SDIN is sampled at the rising edge of SCLK.
*/
void lcd_write(byte dc,byte data){
	digitalWrite(LCD_PIN_SDIN, dc);
	digitalWrite(LCD_PIN_SCE, LOW);
	digitalWrite(LCD_PIN_SCLK, HIGH);
	digitalWrite(LCD_PIN_SCLK, LOW);
	shiftOut(LCD_PIN_SDIN, LCD_PIN_SCLK, MSBFIRST, data);
	digitalWrite(LCD_PIN_SCE, HIGH);
}
/*
	LCD_INIT():
		note:
			this define how will the pins will be used
			for more reference also read LCD_REFRESH() & LCD_CLEAR()
*/
void lcd_init(){
	pinMode(LCD_PIN_SCE, OUTPUT);
	pinMode(LCD_PIN_RESET, OUTPUT);
	pinMode(LCD_PIN_SDIN, OUTPUT);
	pinMode(LCD_PIN_SCLK, OUTPUT);
	digitalWrite(LCD_PIN_RESET, LOW);
	digitalWrite(LCD_PIN_SCE, HIGH);
	digitalWrite(LCD_PIN_SCLK, LOW);
	lcd_refresh();
	delay(200);
	lcd_clear();
}
/*
	LCD_REFRESH()
		note:
			* you can or a 5 bit binary number with LCD_VOB_LSB to set contrast [see datasheet for more]
				0x00 : lowest contrast
				0x01 : heigher than 0x00
				0x02 : heigher than 0x01
				.
				.
				.
				0x1F : heighest contrast
			* charge pump inbuild
				i didnt understood it use here but in prevous code is was there so didnt want to mess
			*we have to reset the deivce beacuse it is required for initalisation [see datasheet]
*/
void lcd_refresh(){
	digitalWrite(LCD_PIN_RESET, LOW);
	digitalWrite(LCD_PIN_RESET, HIGH);
	lcd_write(FLAG_CMD,LCD_CHARGE_PUMP_ON);
	lcd_contrast(LCD_CONTRAST);
	lcd_on();
}
/*
	LCD_CLEAR()
		note:
			every pixel is cleared by sending 0x00 for 864 times
			864 times because the their is a single pixel line at the last (65 pixel height)
*/
void lcd_clear(){
/*	date: 21/05/2012
	added lcd_gotoxy to reset at zero position
*/
	lcd_gotoyx(0,0);
	int index;
	for(index=0; index < 864; index++)
		lcd_write(FLAG_DATA,0x00);
/*
	date: 21/05/2012
	added to wait a while after clearing lcd
*/
	delay(200);
}
/*
	LCD_COL():
		note:
			set the X address or COLOUMN number for lcd
			it is send in two parts
				first the 4 LSB's
				second the 3 MSB's (exclude the 7 MSB)[first bit referenced as bit0]
				for example
					b7 | b6 | b5 | b4 | b3 | b2 | b1 | b0
					   |<- 2nd CMD  ->|<-   1St CMD   ->|
		tricks:
                        since we are using horizontal addressing mode thats why we are multiplying character size
			LINE 1:
				0x0F is used to remove 3 MSB BITS
			LINE 2:
				ADDR>>4 is used to shift the 3 MSB to right so that they can be send[read datasheet for why?]
				0x07 is used to remove the 8Th bit (that is now at 4th place after shifting)
*/
void lcd_col(byte addr){
	addr *= CHAR_WIDTH;
	lcd_write(FLAG_CMD,LCD_CHANGE_ROW_LSB | ( addr & 0x0F));
	lcd_write(FLAG_CMD,LCD_CHANGE_ROW_MSB | ( (addr >> 4) & 0x07 ));
}
/*
	LCD_ROW():
		note:
			set the x address or row number for lcd
			only 4 LSB's are send
			b7 | b6 | b5 | b4 | b3 | b2 | b1 | b0
					          |<-  only send  ->|
		tricks:
			LINE1:
				0x0F is used to remove the first 3 MSB's or only retain first 4 LSB's
							  
*/						
void lcd_row(byte addr){
	lcd_write(FLAG_CMD,LCD_CHANGE_COL | ( addr & 0x0F ));
}
/*
	LCD_STRING():
		note:
			print a string on lcd recursively
		trick:
			print character using LCD_CHARACTER()
*/
void lcd_string(char *string){
	while(*string)
	  lcd_character(*string++);
}
/*
	LCD_CHARACTER():
		note:
			print character to lcd
		trick:
			CHARACTER - 0x20 is make is eligible for ascii array
			it print recursily CHAR_WIDTH no of times 8 bit to lcd
*/
void lcd_character(char ch){
	byte index;
	for(index=0; index < CHAR_WIDTH; index++)\
		lcd_write(FLAG_DATA,ASCII[ ch -0x20 ][index]);
}
/*
  turn off the lcd by power down all its component
    Power-down mode,display off, row/col at VSS, oscillator off, HVgen disabled
  see datasheet page number 29,table 11
*/
void lcd_off(){
	lcd_write(FLAG_CMD,LCD_MODE|DISPLAY|OFF);
	lcd_write(FLAG_CMD,LCD_MODE|ALL|ON);
}
/*
  turn off the lcd by power down some components
    display off, row/col at VSS, oscillator on, HVgen enabled
  see datasheet page number 29,table 11
*/
void lcd_off_partial(){
	lcd_write(FLAG_CMD,LCD_MODE|DISPLAY|OFF);
	lcd_write(FLAG_CMD,LCD_MODE|ALL|OFF);
}
/*
  start or power on the lcd or power up
  see datasheet page number 29,table 11
*/
void lcd_normal(){
	lcd_write(FLAG_CMD,LCD_MODE|DISPLAY|ON);
	lcd_write(FLAG_CMD,LCD_MODE|ALL|OFF);
	lcd_write(FLAG_CMD,LCD_MODE|INVERT|OFF);
}
/*
  start or re-initalise lcd in inverse vedio mode
  see datasheet page number 29,table 11
*/
void lcd_invert(){
	lcd_write(FLAG_CMD,LCD_MODE|DISPLAY|ON);
	lcd_write(FLAG_CMD,LCD_MODE|ALL|OFF);
	lcd_write(FLAG_CMD,LCD_MODE|INVERT|ON);
}
/*
  start or re-initalise the lcd in all pixel mode
  see datasheet page number 29,table 11
*/
void lcd_all(){
	lcd_write(FLAG_CMD,LCD_MODE|DISPLAY|ON);
	lcd_write(FLAG_CMD,LCD_MODE|ALL|ON);
}
/*
  LCD_CONTRAST():
    note:
      change contrast of lcd
    trick:
      LINE 1:
        contrast value are feed into Vob register , 
        only 5 LSB bits are send so AND'd with
        0x1F to remove 3 MSB's
        see datasheet for more
*/
void lcd_contrast(byte value){
	lcd_write(FLAG_CMD,LCD_VOB_MSB|0x04);
	lcd_write(FLAG_CMD,LCD_VOB_LSB|(value & 0x1F));
}

//==============================================================================
#define SYM_HEIGHT  (24/8) // количество байт в высоту
#define SYM_WIDGHT  (16)
//==============================================================================
void char_24x16(unsigned int aDig, unsigned int aX, unsigned int aY)
{
	int i = 0, j = 0;
  for(i = 0; i < SYM_HEIGHT; i++)
  {
    lcd_gotoyx(aY+i, aX);     
    for(j = 0; j < SYM_WIDGHT; j++)
      lcd_write(_DATA, Times_16x24[j+i*SYM_WIDGHT + aDig*SYM_WIDGHT*SYM_HEIGHT]);
  }
}
//==============================================================================
void char_10x16(unsigned int aX, unsigned int aY, unsigned int aDig)
{
	int i = 0, j = 0;
  for(i = 0; i < 2; i++)
  {
    lcd_gotoyx(aY+i, aX);     
    for(j = 0; j < 10; j++) lcd_write(_DATA, courier_10x16[j+i*10 + aDig*10*2]);
  }
}
//==============================================================================
